#!/bin/bash
#If first, second or third argument are --help, show help
curdir=$(pwd)
directory=$1
script=$2
argument=$3
function prepend() { while read line; do echo "${1}${line}"; done; }

#Determine page that will be edited
   #if ~/default_page exists, cd to its content
if [ -f "$HOME/.defaultpage" ]; then
    $siteRoot = $(cat $HOME/.defaultpage)
fi

#If current directory contains a file named .deploy, source it
if [ -f ".deploy" ]; then
    source .deploy
elif [ -f "$siteRoot/.deploy" ]; then
    source $siteRoot/.deploy
else
    devSiteUrl="NO SITE SELECTED";
fi

echo "[[ $devSiteUrl ]]";

cd /home/bitnami/devenv-scripts
# If argument is 'init', run the init-repo.bash script
if [ "$directory" = "init" ]; then
    script=init-repo
elif [ -z "$directory" ]; then
    echo "üìÅ $directory Commands"
    ls -1 $directory | grep -v "^_" | sed $'s/\.[^.]*$//' | prepend "   ‚îî "
    exit 0
#if $script is empty, list files in $directory without extension and excluding files starting with _
elif [ -z "$script" ]; then
    echo "üìÅ $directory Commands"
    ls -1 $directory | grep -v "^_" | sed $'s/\.[^.]*$//' | prepend "   ‚îî "
    exit 0
fi

#if $argument is --help print the scripts name and the second line of $script file in $directory, exluding the first line
if [ "$argument" = "--help" ]; then
    echo -ne "dev $directory $script \t\t\t  "
    sed -n '2p' $directory/$script.bash  | sed $'\ts/^.\{2\}//'
    exit 0
fi

#if script is --help, do the same as above but for each file in $directory, excluding files starting with _
if [ "$script" = "--help" ]; then
    echo "üìÅ $directory Commands"
    ls -1 $directory | grep -v "^_" | sed 's/\.[^.]*$//' | while read -r line; do
        echo -ne "dev $directory $line _"$(  sed -n '2p' $directory/$line.bash  | sed $'\ts/^.\{2\}//') | column -t -s "_" -o "   " | prepend "   ‚îî "
      
    done
    exit 0
fi

#If $script is not empty, run the script in $directory
if [ ! -z "$script" ]; then
    if [ -f "$directory/$script.bash" ]; then
     

        bash $directory/$script.bash $argument
    else
        echo "Error: $script not found"
        exit 1
    fi
fi

cd $curdir

